// This file is @generated by syn-internal-codegen.
// It is not intended for manual editing.

use crate::*;
use arbitrary::{Arbitrary, Unstructured};
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for Abi {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(Abi {
            extern_token: Arbitrary::arbitrary(u)?,
            name: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for AngleBracketedGenericArguments {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(AngleBracketedGenericArguments {
            colon2_token: Arbitrary::arbitrary(u)?,
            lt_token: Arbitrary::arbitrary(u)?,
            args: Arbitrary::arbitrary(u)?,
            gt_token: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for Arm {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(Arm {
            attrs: Arbitrary::arbitrary(u)?,
            pat: Arbitrary::arbitrary(u)?,
            guard: Arbitrary::arbitrary(u)?,
            fat_arrow_token: Arbitrary::arbitrary(u)?,
            body: Arbitrary::arbitrary(u)?,
            comma: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for AttrStyle {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok({
            let index = (0..2u8).arbitrary(u)?;
            match index {
                0u8 => AttrStyle::Outer,
                1u8 => AttrStyle::Inner(Arbitrary::arbitrary(u)?),
            }
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for Attribute {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(Attribute {
            pound_token: Arbitrary::arbitrary(u)?,
            style: Arbitrary::arbitrary(u)?,
            bracket_token: Arbitrary::arbitrary(u)?,
            path: Arbitrary::arbitrary(u)?,
            tokens: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for BareFnArg {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(BareFnArg {
            attrs: Arbitrary::arbitrary(u)?,
            name: Arbitrary::arbitrary(u)?,
            ty: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for BinOp {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok({
            let index = (0..28u8).arbitrary(u)?;
            match index {
                0u8 => BinOp::Add(Arbitrary::arbitrary(u)?),
                1u8 => BinOp::Sub(Arbitrary::arbitrary(u)?),
                2u8 => BinOp::Mul(Arbitrary::arbitrary(u)?),
                3u8 => BinOp::Div(Arbitrary::arbitrary(u)?),
                4u8 => BinOp::Rem(Arbitrary::arbitrary(u)?),
                5u8 => BinOp::And(Arbitrary::arbitrary(u)?),
                6u8 => BinOp::Or(Arbitrary::arbitrary(u)?),
                7u8 => BinOp::BitXor(Arbitrary::arbitrary(u)?),
                8u8 => BinOp::BitAnd(Arbitrary::arbitrary(u)?),
                9u8 => BinOp::BitOr(Arbitrary::arbitrary(u)?),
                10u8 => BinOp::Shl(Arbitrary::arbitrary(u)?),
                11u8 => BinOp::Shr(Arbitrary::arbitrary(u)?),
                12u8 => BinOp::Eq(Arbitrary::arbitrary(u)?),
                13u8 => BinOp::Lt(Arbitrary::arbitrary(u)?),
                14u8 => BinOp::Le(Arbitrary::arbitrary(u)?),
                15u8 => BinOp::Ne(Arbitrary::arbitrary(u)?),
                16u8 => BinOp::Ge(Arbitrary::arbitrary(u)?),
                17u8 => BinOp::Gt(Arbitrary::arbitrary(u)?),
                18u8 => BinOp::AddEq(Arbitrary::arbitrary(u)?),
                19u8 => BinOp::SubEq(Arbitrary::arbitrary(u)?),
                20u8 => BinOp::MulEq(Arbitrary::arbitrary(u)?),
                21u8 => BinOp::DivEq(Arbitrary::arbitrary(u)?),
                22u8 => BinOp::RemEq(Arbitrary::arbitrary(u)?),
                23u8 => BinOp::BitXorEq(Arbitrary::arbitrary(u)?),
                24u8 => BinOp::BitAndEq(Arbitrary::arbitrary(u)?),
                25u8 => BinOp::BitOrEq(Arbitrary::arbitrary(u)?),
                26u8 => BinOp::ShlEq(Arbitrary::arbitrary(u)?),
                27u8 => BinOp::ShrEq(Arbitrary::arbitrary(u)?),
            }
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for Binding {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(Binding {
            ident: Arbitrary::arbitrary(u)?,
            eq_token: Arbitrary::arbitrary(u)?,
            ty: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for Block {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(Block {
            brace_token: Arbitrary::arbitrary(u)?,
            stmts: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for BoundLifetimes {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(BoundLifetimes {
            for_token: Arbitrary::arbitrary(u)?,
            lt_token: Arbitrary::arbitrary(u)?,
            lifetimes: Arbitrary::arbitrary(u)?,
            gt_token: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ConstParam {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ConstParam {
            attrs: Arbitrary::arbitrary(u)?,
            const_token: Arbitrary::arbitrary(u)?,
            ident: Arbitrary::arbitrary(u)?,
            colon_token: Arbitrary::arbitrary(u)?,
            ty: Arbitrary::arbitrary(u)?,
            eq_token: Arbitrary::arbitrary(u)?,
            default: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for Constraint {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(Constraint {
            ident: Arbitrary::arbitrary(u)?,
            colon_token: Arbitrary::arbitrary(u)?,
            bounds: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "derive")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for Data {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok({
            let index = (0..3u8).arbitrary(u)?;
            match index {
                0u8 => Data::Struct(Arbitrary::arbitrary(u)?),
                1u8 => Data::Enum(Arbitrary::arbitrary(u)?),
                2u8 => Data::Union(Arbitrary::arbitrary(u)?),
            }
        })
    }
}
#[cfg(feature = "derive")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for DataEnum {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(DataEnum {
            enum_token: Arbitrary::arbitrary(u)?,
            brace_token: Arbitrary::arbitrary(u)?,
            variants: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "derive")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for DataStruct {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(DataStruct {
            struct_token: Arbitrary::arbitrary(u)?,
            fields: Arbitrary::arbitrary(u)?,
            semi_token: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "derive")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for DataUnion {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(DataUnion {
            union_token: Arbitrary::arbitrary(u)?,
            fields: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "derive")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for DeriveInput {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(DeriveInput {
            attrs: Arbitrary::arbitrary(u)?,
            vis: Arbitrary::arbitrary(u)?,
            ident: Arbitrary::arbitrary(u)?,
            generics: Arbitrary::arbitrary(u)?,
            data: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for Expr {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok({
            let index = (0..40u8).arbitrary(u)?;
            match index {
                0u8 => Expr::Array(Arbitrary::arbitrary(u)?),
                1u8 => Expr::Assign(Arbitrary::arbitrary(u)?),
                2u8 => Expr::AssignOp(Arbitrary::arbitrary(u)?),
                3u8 => Expr::Async(Arbitrary::arbitrary(u)?),
                4u8 => Expr::Await(Arbitrary::arbitrary(u)?),
                5u8 => Expr::Binary(Arbitrary::arbitrary(u)?),
                6u8 => Expr::Block(Arbitrary::arbitrary(u)?),
                7u8 => Expr::Box(Arbitrary::arbitrary(u)?),
                8u8 => Expr::Break(Arbitrary::arbitrary(u)?),
                9u8 => Expr::Call(Arbitrary::arbitrary(u)?),
                10u8 => Expr::Cast(Arbitrary::arbitrary(u)?),
                11u8 => Expr::Closure(Arbitrary::arbitrary(u)?),
                12u8 => Expr::Continue(Arbitrary::arbitrary(u)?),
                13u8 => Expr::Field(Arbitrary::arbitrary(u)?),
                14u8 => Expr::ForLoop(Arbitrary::arbitrary(u)?),
                15u8 => Expr::Group(Arbitrary::arbitrary(u)?),
                16u8 => Expr::If(Arbitrary::arbitrary(u)?),
                17u8 => Expr::Index(Arbitrary::arbitrary(u)?),
                18u8 => Expr::Let(Arbitrary::arbitrary(u)?),
                19u8 => Expr::Lit(Arbitrary::arbitrary(u)?),
                20u8 => Expr::Loop(Arbitrary::arbitrary(u)?),
                21u8 => Expr::Macro(Arbitrary::arbitrary(u)?),
                22u8 => Expr::Match(Arbitrary::arbitrary(u)?),
                23u8 => Expr::MethodCall(Arbitrary::arbitrary(u)?),
                24u8 => Expr::Paren(Arbitrary::arbitrary(u)?),
                25u8 => Expr::Path(Arbitrary::arbitrary(u)?),
                26u8 => Expr::Range(Arbitrary::arbitrary(u)?),
                27u8 => Expr::Reference(Arbitrary::arbitrary(u)?),
                28u8 => Expr::Repeat(Arbitrary::arbitrary(u)?),
                29u8 => Expr::Return(Arbitrary::arbitrary(u)?),
                30u8 => Expr::Struct(Arbitrary::arbitrary(u)?),
                31u8 => Expr::Try(Arbitrary::arbitrary(u)?),
                32u8 => Expr::TryBlock(Arbitrary::arbitrary(u)?),
                33u8 => Expr::Tuple(Arbitrary::arbitrary(u)?),
                34u8 => Expr::Type(Arbitrary::arbitrary(u)?),
                35u8 => Expr::Unary(Arbitrary::arbitrary(u)?),
                36u8 => Expr::Unsafe(Arbitrary::arbitrary(u)?),
                37u8 => Expr::Verbatim(Arbitrary::arbitrary(u)?),
                38u8 => Expr::While(Arbitrary::arbitrary(u)?),
                39u8 => Expr::Yield(Arbitrary::arbitrary(u)?),
            }
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ExprArray {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ExprArray {
            attrs: Arbitrary::arbitrary(u)?,
            bracket_token: Arbitrary::arbitrary(u)?,
            elems: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ExprAssign {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ExprAssign {
            attrs: Arbitrary::arbitrary(u)?,
            left: Arbitrary::arbitrary(u)?,
            eq_token: Arbitrary::arbitrary(u)?,
            right: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ExprAssignOp {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ExprAssignOp {
            attrs: Arbitrary::arbitrary(u)?,
            left: Arbitrary::arbitrary(u)?,
            op: Arbitrary::arbitrary(u)?,
            right: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ExprAsync {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ExprAsync {
            attrs: Arbitrary::arbitrary(u)?,
            async_token: Arbitrary::arbitrary(u)?,
            capture: Arbitrary::arbitrary(u)?,
            block: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ExprAwait {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ExprAwait {
            attrs: Arbitrary::arbitrary(u)?,
            base: Arbitrary::arbitrary(u)?,
            dot_token: Arbitrary::arbitrary(u)?,
            await_token: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ExprBinary {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ExprBinary {
            attrs: Arbitrary::arbitrary(u)?,
            left: Arbitrary::arbitrary(u)?,
            op: Arbitrary::arbitrary(u)?,
            right: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ExprBlock {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ExprBlock {
            attrs: Arbitrary::arbitrary(u)?,
            label: Arbitrary::arbitrary(u)?,
            block: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ExprBox {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ExprBox {
            attrs: Arbitrary::arbitrary(u)?,
            box_token: Arbitrary::arbitrary(u)?,
            expr: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ExprBreak {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ExprBreak {
            attrs: Arbitrary::arbitrary(u)?,
            break_token: Arbitrary::arbitrary(u)?,
            label: Arbitrary::arbitrary(u)?,
            expr: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ExprCall {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ExprCall {
            attrs: Arbitrary::arbitrary(u)?,
            func: Arbitrary::arbitrary(u)?,
            paren_token: Arbitrary::arbitrary(u)?,
            args: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ExprCast {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ExprCast {
            attrs: Arbitrary::arbitrary(u)?,
            expr: Arbitrary::arbitrary(u)?,
            as_token: Arbitrary::arbitrary(u)?,
            ty: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ExprClosure {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ExprClosure {
            attrs: Arbitrary::arbitrary(u)?,
            movability: Arbitrary::arbitrary(u)?,
            asyncness: Arbitrary::arbitrary(u)?,
            capture: Arbitrary::arbitrary(u)?,
            or1_token: Arbitrary::arbitrary(u)?,
            inputs: Arbitrary::arbitrary(u)?,
            or2_token: Arbitrary::arbitrary(u)?,
            output: Arbitrary::arbitrary(u)?,
            body: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ExprContinue {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ExprContinue {
            attrs: Arbitrary::arbitrary(u)?,
            continue_token: Arbitrary::arbitrary(u)?,
            label: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ExprField {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ExprField {
            attrs: Arbitrary::arbitrary(u)?,
            base: Arbitrary::arbitrary(u)?,
            dot_token: Arbitrary::arbitrary(u)?,
            member: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ExprForLoop {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ExprForLoop {
            attrs: Arbitrary::arbitrary(u)?,
            label: Arbitrary::arbitrary(u)?,
            for_token: Arbitrary::arbitrary(u)?,
            pat: Arbitrary::arbitrary(u)?,
            in_token: Arbitrary::arbitrary(u)?,
            expr: Arbitrary::arbitrary(u)?,
            body: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ExprGroup {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ExprGroup {
            attrs: Arbitrary::arbitrary(u)?,
            group_token: Arbitrary::arbitrary(u)?,
            expr: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ExprIf {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ExprIf {
            attrs: Arbitrary::arbitrary(u)?,
            if_token: Arbitrary::arbitrary(u)?,
            cond: Arbitrary::arbitrary(u)?,
            then_branch: Arbitrary::arbitrary(u)?,
            else_branch: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ExprIndex {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ExprIndex {
            attrs: Arbitrary::arbitrary(u)?,
            expr: Arbitrary::arbitrary(u)?,
            bracket_token: Arbitrary::arbitrary(u)?,
            index: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ExprLet {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ExprLet {
            attrs: Arbitrary::arbitrary(u)?,
            let_token: Arbitrary::arbitrary(u)?,
            pat: Arbitrary::arbitrary(u)?,
            eq_token: Arbitrary::arbitrary(u)?,
            expr: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ExprLit {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ExprLit {
            attrs: Arbitrary::arbitrary(u)?,
            lit: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ExprLoop {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ExprLoop {
            attrs: Arbitrary::arbitrary(u)?,
            label: Arbitrary::arbitrary(u)?,
            loop_token: Arbitrary::arbitrary(u)?,
            body: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ExprMacro {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ExprMacro {
            attrs: Arbitrary::arbitrary(u)?,
            mac: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ExprMatch {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ExprMatch {
            attrs: Arbitrary::arbitrary(u)?,
            match_token: Arbitrary::arbitrary(u)?,
            expr: Arbitrary::arbitrary(u)?,
            brace_token: Arbitrary::arbitrary(u)?,
            arms: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ExprMethodCall {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ExprMethodCall {
            attrs: Arbitrary::arbitrary(u)?,
            receiver: Arbitrary::arbitrary(u)?,
            dot_token: Arbitrary::arbitrary(u)?,
            method: Arbitrary::arbitrary(u)?,
            turbofish: Arbitrary::arbitrary(u)?,
            paren_token: Arbitrary::arbitrary(u)?,
            args: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ExprParen {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ExprParen {
            attrs: Arbitrary::arbitrary(u)?,
            paren_token: Arbitrary::arbitrary(u)?,
            expr: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ExprPath {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ExprPath {
            attrs: Arbitrary::arbitrary(u)?,
            qself: Arbitrary::arbitrary(u)?,
            path: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ExprRange {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ExprRange {
            attrs: Arbitrary::arbitrary(u)?,
            from: Arbitrary::arbitrary(u)?,
            limits: Arbitrary::arbitrary(u)?,
            to: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ExprReference {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ExprReference {
            attrs: Arbitrary::arbitrary(u)?,
            and_token: Arbitrary::arbitrary(u)?,
            raw: Arbitrary::arbitrary(u)?,
            mutability: Arbitrary::arbitrary(u)?,
            expr: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ExprRepeat {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ExprRepeat {
            attrs: Arbitrary::arbitrary(u)?,
            bracket_token: Arbitrary::arbitrary(u)?,
            expr: Arbitrary::arbitrary(u)?,
            semi_token: Arbitrary::arbitrary(u)?,
            len: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ExprReturn {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ExprReturn {
            attrs: Arbitrary::arbitrary(u)?,
            return_token: Arbitrary::arbitrary(u)?,
            expr: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ExprStruct {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ExprStruct {
            attrs: Arbitrary::arbitrary(u)?,
            path: Arbitrary::arbitrary(u)?,
            brace_token: Arbitrary::arbitrary(u)?,
            fields: Arbitrary::arbitrary(u)?,
            dot2_token: Arbitrary::arbitrary(u)?,
            rest: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ExprTry {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ExprTry {
            attrs: Arbitrary::arbitrary(u)?,
            expr: Arbitrary::arbitrary(u)?,
            question_token: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ExprTryBlock {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ExprTryBlock {
            attrs: Arbitrary::arbitrary(u)?,
            try_token: Arbitrary::arbitrary(u)?,
            block: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ExprTuple {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ExprTuple {
            attrs: Arbitrary::arbitrary(u)?,
            paren_token: Arbitrary::arbitrary(u)?,
            elems: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ExprType {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ExprType {
            attrs: Arbitrary::arbitrary(u)?,
            expr: Arbitrary::arbitrary(u)?,
            colon_token: Arbitrary::arbitrary(u)?,
            ty: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ExprUnary {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ExprUnary {
            attrs: Arbitrary::arbitrary(u)?,
            op: Arbitrary::arbitrary(u)?,
            expr: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ExprUnsafe {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ExprUnsafe {
            attrs: Arbitrary::arbitrary(u)?,
            unsafe_token: Arbitrary::arbitrary(u)?,
            block: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ExprWhile {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ExprWhile {
            attrs: Arbitrary::arbitrary(u)?,
            label: Arbitrary::arbitrary(u)?,
            while_token: Arbitrary::arbitrary(u)?,
            cond: Arbitrary::arbitrary(u)?,
            body: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ExprYield {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ExprYield {
            attrs: Arbitrary::arbitrary(u)?,
            yield_token: Arbitrary::arbitrary(u)?,
            expr: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for Field {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(Field {
            attrs: Arbitrary::arbitrary(u)?,
            vis: Arbitrary::arbitrary(u)?,
            ident: Arbitrary::arbitrary(u)?,
            colon_token: Arbitrary::arbitrary(u)?,
            ty: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for FieldPat {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(FieldPat {
            attrs: Arbitrary::arbitrary(u)?,
            member: Arbitrary::arbitrary(u)?,
            colon_token: Arbitrary::arbitrary(u)?,
            pat: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for FieldValue {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(FieldValue {
            attrs: Arbitrary::arbitrary(u)?,
            member: Arbitrary::arbitrary(u)?,
            colon_token: Arbitrary::arbitrary(u)?,
            expr: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for Fields {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok({
            let index = (0..3u8).arbitrary(u)?;
            match index {
                0u8 => Fields::Named(Arbitrary::arbitrary(u)?),
                1u8 => Fields::Unnamed(Arbitrary::arbitrary(u)?),
                2u8 => Fields::Unit,
            }
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for FieldsNamed {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(FieldsNamed {
            brace_token: Arbitrary::arbitrary(u)?,
            named: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for FieldsUnnamed {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(FieldsUnnamed {
            paren_token: Arbitrary::arbitrary(u)?,
            unnamed: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for File {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(File {
            shebang: Arbitrary::arbitrary(u)?,
            attrs: Arbitrary::arbitrary(u)?,
            items: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for FnArg {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok({
            let index = (0..2u8).arbitrary(u)?;
            match index {
                0u8 => FnArg::Receiver(Arbitrary::arbitrary(u)?),
                1u8 => FnArg::Typed(Arbitrary::arbitrary(u)?),
            }
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ForeignItem {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok({
            let index = (0..5u8).arbitrary(u)?;
            match index {
                0u8 => ForeignItem::Fn(Arbitrary::arbitrary(u)?),
                1u8 => ForeignItem::Static(Arbitrary::arbitrary(u)?),
                2u8 => ForeignItem::Type(Arbitrary::arbitrary(u)?),
                3u8 => ForeignItem::Macro(Arbitrary::arbitrary(u)?),
                4u8 => ForeignItem::Verbatim(Arbitrary::arbitrary(u)?),
            }
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ForeignItemFn {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ForeignItemFn {
            attrs: Arbitrary::arbitrary(u)?,
            vis: Arbitrary::arbitrary(u)?,
            sig: Arbitrary::arbitrary(u)?,
            semi_token: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ForeignItemMacro {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ForeignItemMacro {
            attrs: Arbitrary::arbitrary(u)?,
            mac: Arbitrary::arbitrary(u)?,
            semi_token: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ForeignItemStatic {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ForeignItemStatic {
            attrs: Arbitrary::arbitrary(u)?,
            vis: Arbitrary::arbitrary(u)?,
            static_token: Arbitrary::arbitrary(u)?,
            mutability: Arbitrary::arbitrary(u)?,
            ident: Arbitrary::arbitrary(u)?,
            colon_token: Arbitrary::arbitrary(u)?,
            ty: Arbitrary::arbitrary(u)?,
            semi_token: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ForeignItemType {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ForeignItemType {
            attrs: Arbitrary::arbitrary(u)?,
            vis: Arbitrary::arbitrary(u)?,
            type_token: Arbitrary::arbitrary(u)?,
            ident: Arbitrary::arbitrary(u)?,
            semi_token: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for GenericArgument {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok({
            let index = (0..5u8).arbitrary(u)?;
            match index {
                0u8 => GenericArgument::Lifetime(Arbitrary::arbitrary(u)?),
                1u8 => GenericArgument::Type(Arbitrary::arbitrary(u)?),
                2u8 => GenericArgument::Binding(Arbitrary::arbitrary(u)?),
                3u8 => GenericArgument::Constraint(Arbitrary::arbitrary(u)?),
                4u8 => GenericArgument::Const(Arbitrary::arbitrary(u)?),
            }
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for GenericMethodArgument {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok({
            let index = (0..2u8).arbitrary(u)?;
            match index {
                0u8 => GenericMethodArgument::Type(Arbitrary::arbitrary(u)?),
                1u8 => GenericMethodArgument::Const(Arbitrary::arbitrary(u)?),
            }
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for GenericParam {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok({
            let index = (0..3u8).arbitrary(u)?;
            match index {
                0u8 => GenericParam::Type(Arbitrary::arbitrary(u)?),
                1u8 => GenericParam::Lifetime(Arbitrary::arbitrary(u)?),
                2u8 => GenericParam::Const(Arbitrary::arbitrary(u)?),
            }
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for Generics {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(Generics {
            lt_token: Arbitrary::arbitrary(u)?,
            params: Arbitrary::arbitrary(u)?,
            gt_token: Arbitrary::arbitrary(u)?,
            where_clause: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ImplItem {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok({
            let index = (0..5u8).arbitrary(u)?;
            match index {
                0u8 => ImplItem::Const(Arbitrary::arbitrary(u)?),
                1u8 => ImplItem::Method(Arbitrary::arbitrary(u)?),
                2u8 => ImplItem::Type(Arbitrary::arbitrary(u)?),
                3u8 => ImplItem::Macro(Arbitrary::arbitrary(u)?),
                4u8 => ImplItem::Verbatim(Arbitrary::arbitrary(u)?),
            }
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ImplItemConst {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ImplItemConst {
            attrs: Arbitrary::arbitrary(u)?,
            vis: Arbitrary::arbitrary(u)?,
            defaultness: Arbitrary::arbitrary(u)?,
            const_token: Arbitrary::arbitrary(u)?,
            ident: Arbitrary::arbitrary(u)?,
            colon_token: Arbitrary::arbitrary(u)?,
            ty: Arbitrary::arbitrary(u)?,
            eq_token: Arbitrary::arbitrary(u)?,
            expr: Arbitrary::arbitrary(u)?,
            semi_token: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ImplItemMacro {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ImplItemMacro {
            attrs: Arbitrary::arbitrary(u)?,
            mac: Arbitrary::arbitrary(u)?,
            semi_token: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ImplItemMethod {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ImplItemMethod {
            attrs: Arbitrary::arbitrary(u)?,
            vis: Arbitrary::arbitrary(u)?,
            defaultness: Arbitrary::arbitrary(u)?,
            sig: Arbitrary::arbitrary(u)?,
            block: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ImplItemType {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ImplItemType {
            attrs: Arbitrary::arbitrary(u)?,
            vis: Arbitrary::arbitrary(u)?,
            defaultness: Arbitrary::arbitrary(u)?,
            type_token: Arbitrary::arbitrary(u)?,
            ident: Arbitrary::arbitrary(u)?,
            generics: Arbitrary::arbitrary(u)?,
            eq_token: Arbitrary::arbitrary(u)?,
            ty: Arbitrary::arbitrary(u)?,
            semi_token: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for Index {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(Index {
            index: Arbitrary::arbitrary(u)?,
            span: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for Item {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok({
            let index = (0..17u8).arbitrary(u)?;
            match index {
                0u8 => Item::Const(Arbitrary::arbitrary(u)?),
                1u8 => Item::Enum(Arbitrary::arbitrary(u)?),
                2u8 => Item::ExternCrate(Arbitrary::arbitrary(u)?),
                3u8 => Item::Fn(Arbitrary::arbitrary(u)?),
                4u8 => Item::ForeignMod(Arbitrary::arbitrary(u)?),
                5u8 => Item::Impl(Arbitrary::arbitrary(u)?),
                6u8 => Item::Macro(Arbitrary::arbitrary(u)?),
                7u8 => Item::Macro2(Arbitrary::arbitrary(u)?),
                8u8 => Item::Mod(Arbitrary::arbitrary(u)?),
                9u8 => Item::Static(Arbitrary::arbitrary(u)?),
                10u8 => Item::Struct(Arbitrary::arbitrary(u)?),
                11u8 => Item::Trait(Arbitrary::arbitrary(u)?),
                12u8 => Item::TraitAlias(Arbitrary::arbitrary(u)?),
                13u8 => Item::Type(Arbitrary::arbitrary(u)?),
                14u8 => Item::Union(Arbitrary::arbitrary(u)?),
                15u8 => Item::Use(Arbitrary::arbitrary(u)?),
                16u8 => Item::Verbatim(Arbitrary::arbitrary(u)?),
            }
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ItemConst {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ItemConst {
            attrs: Arbitrary::arbitrary(u)?,
            vis: Arbitrary::arbitrary(u)?,
            const_token: Arbitrary::arbitrary(u)?,
            ident: Arbitrary::arbitrary(u)?,
            colon_token: Arbitrary::arbitrary(u)?,
            ty: Arbitrary::arbitrary(u)?,
            eq_token: Arbitrary::arbitrary(u)?,
            expr: Arbitrary::arbitrary(u)?,
            semi_token: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ItemEnum {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ItemEnum {
            attrs: Arbitrary::arbitrary(u)?,
            vis: Arbitrary::arbitrary(u)?,
            enum_token: Arbitrary::arbitrary(u)?,
            ident: Arbitrary::arbitrary(u)?,
            generics: Arbitrary::arbitrary(u)?,
            brace_token: Arbitrary::arbitrary(u)?,
            variants: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ItemExternCrate {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ItemExternCrate {
            attrs: Arbitrary::arbitrary(u)?,
            vis: Arbitrary::arbitrary(u)?,
            extern_token: Arbitrary::arbitrary(u)?,
            crate_token: Arbitrary::arbitrary(u)?,
            ident: Arbitrary::arbitrary(u)?,
            rename: Arbitrary::arbitrary(u)?,
            semi_token: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ItemFn {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ItemFn {
            attrs: Arbitrary::arbitrary(u)?,
            vis: Arbitrary::arbitrary(u)?,
            sig: Arbitrary::arbitrary(u)?,
            block: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ItemForeignMod {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ItemForeignMod {
            attrs: Arbitrary::arbitrary(u)?,
            abi: Arbitrary::arbitrary(u)?,
            brace_token: Arbitrary::arbitrary(u)?,
            items: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ItemImpl {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ItemImpl {
            attrs: Arbitrary::arbitrary(u)?,
            defaultness: Arbitrary::arbitrary(u)?,
            unsafety: Arbitrary::arbitrary(u)?,
            impl_token: Arbitrary::arbitrary(u)?,
            generics: Arbitrary::arbitrary(u)?,
            trait_: Arbitrary::arbitrary(u)?,
            self_ty: Arbitrary::arbitrary(u)?,
            brace_token: Arbitrary::arbitrary(u)?,
            items: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ItemMacro {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ItemMacro {
            attrs: Arbitrary::arbitrary(u)?,
            ident: Arbitrary::arbitrary(u)?,
            mac: Arbitrary::arbitrary(u)?,
            semi_token: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ItemMacro2 {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ItemMacro2 {
            attrs: Arbitrary::arbitrary(u)?,
            vis: Arbitrary::arbitrary(u)?,
            macro_token: Arbitrary::arbitrary(u)?,
            ident: Arbitrary::arbitrary(u)?,
            rules: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ItemMod {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ItemMod {
            attrs: Arbitrary::arbitrary(u)?,
            vis: Arbitrary::arbitrary(u)?,
            mod_token: Arbitrary::arbitrary(u)?,
            ident: Arbitrary::arbitrary(u)?,
            content: Arbitrary::arbitrary(u)?,
            semi: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ItemStatic {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ItemStatic {
            attrs: Arbitrary::arbitrary(u)?,
            vis: Arbitrary::arbitrary(u)?,
            static_token: Arbitrary::arbitrary(u)?,
            mutability: Arbitrary::arbitrary(u)?,
            ident: Arbitrary::arbitrary(u)?,
            colon_token: Arbitrary::arbitrary(u)?,
            ty: Arbitrary::arbitrary(u)?,
            eq_token: Arbitrary::arbitrary(u)?,
            expr: Arbitrary::arbitrary(u)?,
            semi_token: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ItemStruct {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ItemStruct {
            attrs: Arbitrary::arbitrary(u)?,
            vis: Arbitrary::arbitrary(u)?,
            struct_token: Arbitrary::arbitrary(u)?,
            ident: Arbitrary::arbitrary(u)?,
            generics: Arbitrary::arbitrary(u)?,
            fields: Arbitrary::arbitrary(u)?,
            semi_token: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ItemTrait {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ItemTrait {
            attrs: Arbitrary::arbitrary(u)?,
            vis: Arbitrary::arbitrary(u)?,
            unsafety: Arbitrary::arbitrary(u)?,
            auto_token: Arbitrary::arbitrary(u)?,
            trait_token: Arbitrary::arbitrary(u)?,
            ident: Arbitrary::arbitrary(u)?,
            generics: Arbitrary::arbitrary(u)?,
            colon_token: Arbitrary::arbitrary(u)?,
            supertraits: Arbitrary::arbitrary(u)?,
            brace_token: Arbitrary::arbitrary(u)?,
            items: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ItemTraitAlias {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ItemTraitAlias {
            attrs: Arbitrary::arbitrary(u)?,
            vis: Arbitrary::arbitrary(u)?,
            trait_token: Arbitrary::arbitrary(u)?,
            ident: Arbitrary::arbitrary(u)?,
            generics: Arbitrary::arbitrary(u)?,
            eq_token: Arbitrary::arbitrary(u)?,
            bounds: Arbitrary::arbitrary(u)?,
            semi_token: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ItemType {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ItemType {
            attrs: Arbitrary::arbitrary(u)?,
            vis: Arbitrary::arbitrary(u)?,
            type_token: Arbitrary::arbitrary(u)?,
            ident: Arbitrary::arbitrary(u)?,
            generics: Arbitrary::arbitrary(u)?,
            eq_token: Arbitrary::arbitrary(u)?,
            ty: Arbitrary::arbitrary(u)?,
            semi_token: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ItemUnion {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ItemUnion {
            attrs: Arbitrary::arbitrary(u)?,
            vis: Arbitrary::arbitrary(u)?,
            union_token: Arbitrary::arbitrary(u)?,
            ident: Arbitrary::arbitrary(u)?,
            generics: Arbitrary::arbitrary(u)?,
            fields: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ItemUse {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ItemUse {
            attrs: Arbitrary::arbitrary(u)?,
            vis: Arbitrary::arbitrary(u)?,
            use_token: Arbitrary::arbitrary(u)?,
            leading_colon: Arbitrary::arbitrary(u)?,
            tree: Arbitrary::arbitrary(u)?,
            semi_token: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for Label {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(Label {
            name: Arbitrary::arbitrary(u)?,
            colon_token: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for Lifetime {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(Lifetime {
            apostrophe: Arbitrary::arbitrary(u)?,
            ident: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for LifetimeDef {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(LifetimeDef {
            attrs: Arbitrary::arbitrary(u)?,
            lifetime: Arbitrary::arbitrary(u)?,
            colon_token: Arbitrary::arbitrary(u)?,
            bounds: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for Lit {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok({
            let index = (0..8u8).arbitrary(u)?;
            match index {
                0u8 => Lit::Str(Arbitrary::arbitrary(u)?),
                1u8 => Lit::ByteStr(Arbitrary::arbitrary(u)?),
                2u8 => Lit::Byte(Arbitrary::arbitrary(u)?),
                3u8 => Lit::Char(Arbitrary::arbitrary(u)?),
                4u8 => Lit::Int(Arbitrary::arbitrary(u)?),
                5u8 => Lit::Float(Arbitrary::arbitrary(u)?),
                6u8 => Lit::Bool(Arbitrary::arbitrary(u)?),
                7u8 => Lit::Verbatim(Arbitrary::arbitrary(u)?),
            }
        })
    }
}
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for LitBool {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(LitBool {
            value: Arbitrary::arbitrary(u)?,
            span: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for Local {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(Local {
            attrs: Arbitrary::arbitrary(u)?,
            let_token: Arbitrary::arbitrary(u)?,
            pat: Arbitrary::arbitrary(u)?,
            init: Arbitrary::arbitrary(u)?,
            semi_token: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for Macro {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(Macro {
            path: Arbitrary::arbitrary(u)?,
            bang_token: Arbitrary::arbitrary(u)?,
            delimiter: Arbitrary::arbitrary(u)?,
            tokens: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for MacroDelimiter {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok({
            let index = (0..3u8).arbitrary(u)?;
            match index {
                0u8 => MacroDelimiter::Paren(Arbitrary::arbitrary(u)?),
                1u8 => MacroDelimiter::Brace(Arbitrary::arbitrary(u)?),
                2u8 => MacroDelimiter::Bracket(Arbitrary::arbitrary(u)?),
            }
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for Member {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok({
            let index = (0..2u8).arbitrary(u)?;
            match index {
                0u8 => Member::Named(Arbitrary::arbitrary(u)?),
                1u8 => Member::Unnamed(Arbitrary::arbitrary(u)?),
            }
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for Meta {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok({
            let index = (0..3u8).arbitrary(u)?;
            match index {
                0u8 => Meta::Path(Arbitrary::arbitrary(u)?),
                1u8 => Meta::List(Arbitrary::arbitrary(u)?),
                2u8 => Meta::NameValue(Arbitrary::arbitrary(u)?),
            }
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for MetaList {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(MetaList {
            path: Arbitrary::arbitrary(u)?,
            paren_token: Arbitrary::arbitrary(u)?,
            nested: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for MetaNameValue {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(MetaNameValue {
            path: Arbitrary::arbitrary(u)?,
            eq_token: Arbitrary::arbitrary(u)?,
            lit: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for MethodTurbofish {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(MethodTurbofish {
            colon2_token: Arbitrary::arbitrary(u)?,
            lt_token: Arbitrary::arbitrary(u)?,
            args: Arbitrary::arbitrary(u)?,
            gt_token: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for NestedMeta {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok({
            let index = (0..2u8).arbitrary(u)?;
            match index {
                0u8 => NestedMeta::Meta(Arbitrary::arbitrary(u)?),
                1u8 => NestedMeta::Lit(Arbitrary::arbitrary(u)?),
            }
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ParenthesizedGenericArguments {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(ParenthesizedGenericArguments {
            paren_token: Arbitrary::arbitrary(u)?,
            inputs: Arbitrary::arbitrary(u)?,
            output: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for Pat {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok({
            let index = (0..16u8).arbitrary(u)?;
            match index {
                0u8 => Pat::Box(Arbitrary::arbitrary(u)?),
                1u8 => Pat::Ident(Arbitrary::arbitrary(u)?),
                2u8 => Pat::Lit(Arbitrary::arbitrary(u)?),
                3u8 => Pat::Macro(Arbitrary::arbitrary(u)?),
                4u8 => Pat::Or(Arbitrary::arbitrary(u)?),
                5u8 => Pat::Path(Arbitrary::arbitrary(u)?),
                6u8 => Pat::Range(Arbitrary::arbitrary(u)?),
                7u8 => Pat::Reference(Arbitrary::arbitrary(u)?),
                8u8 => Pat::Rest(Arbitrary::arbitrary(u)?),
                9u8 => Pat::Slice(Arbitrary::arbitrary(u)?),
                10u8 => Pat::Struct(Arbitrary::arbitrary(u)?),
                11u8 => Pat::Tuple(Arbitrary::arbitrary(u)?),
                12u8 => Pat::TupleStruct(Arbitrary::arbitrary(u)?),
                13u8 => Pat::Type(Arbitrary::arbitrary(u)?),
                14u8 => Pat::Verbatim(Arbitrary::arbitrary(u)?),
                15u8 => Pat::Wild(Arbitrary::arbitrary(u)?),
            }
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for PatBox {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(PatBox {
            attrs: Arbitrary::arbitrary(u)?,
            box_token: Arbitrary::arbitrary(u)?,
            pat: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for PatIdent {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(PatIdent {
            attrs: Arbitrary::arbitrary(u)?,
            by_ref: Arbitrary::arbitrary(u)?,
            mutability: Arbitrary::arbitrary(u)?,
            ident: Arbitrary::arbitrary(u)?,
            subpat: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for PatLit {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(PatLit {
            attrs: Arbitrary::arbitrary(u)?,
            expr: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for PatMacro {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(PatMacro {
            attrs: Arbitrary::arbitrary(u)?,
            mac: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for PatOr {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(PatOr {
            attrs: Arbitrary::arbitrary(u)?,
            leading_vert: Arbitrary::arbitrary(u)?,
            cases: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for PatPath {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(PatPath {
            attrs: Arbitrary::arbitrary(u)?,
            qself: Arbitrary::arbitrary(u)?,
            path: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for PatRange {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(PatRange {
            attrs: Arbitrary::arbitrary(u)?,
            lo: Arbitrary::arbitrary(u)?,
            limits: Arbitrary::arbitrary(u)?,
            hi: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for PatReference {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(PatReference {
            attrs: Arbitrary::arbitrary(u)?,
            and_token: Arbitrary::arbitrary(u)?,
            mutability: Arbitrary::arbitrary(u)?,
            pat: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for PatRest {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(PatRest {
            attrs: Arbitrary::arbitrary(u)?,
            dot2_token: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for PatSlice {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(PatSlice {
            attrs: Arbitrary::arbitrary(u)?,
            bracket_token: Arbitrary::arbitrary(u)?,
            elems: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for PatStruct {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(PatStruct {
            attrs: Arbitrary::arbitrary(u)?,
            path: Arbitrary::arbitrary(u)?,
            brace_token: Arbitrary::arbitrary(u)?,
            fields: Arbitrary::arbitrary(u)?,
            dot2_token: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for PatTuple {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(PatTuple {
            attrs: Arbitrary::arbitrary(u)?,
            paren_token: Arbitrary::arbitrary(u)?,
            elems: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for PatTupleStruct {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(PatTupleStruct {
            attrs: Arbitrary::arbitrary(u)?,
            path: Arbitrary::arbitrary(u)?,
            pat: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for PatType {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(PatType {
            attrs: Arbitrary::arbitrary(u)?,
            pat: Arbitrary::arbitrary(u)?,
            colon_token: Arbitrary::arbitrary(u)?,
            ty: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for PatWild {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(PatWild {
            attrs: Arbitrary::arbitrary(u)?,
            underscore_token: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for Path {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(Path {
            leading_colon: Arbitrary::arbitrary(u)?,
            segments: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for PathArguments {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok({
            let index = (0..3u8).arbitrary(u)?;
            match index {
                0u8 => PathArguments::None,
                1u8 => PathArguments::AngleBracketed(Arbitrary::arbitrary(u)?),
                2u8 => PathArguments::Parenthesized(Arbitrary::arbitrary(u)?),
            }
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for PathSegment {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(PathSegment {
            ident: Arbitrary::arbitrary(u)?,
            arguments: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for PredicateEq {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(PredicateEq {
            lhs_ty: Arbitrary::arbitrary(u)?,
            eq_token: Arbitrary::arbitrary(u)?,
            rhs_ty: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for PredicateLifetime {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(PredicateLifetime {
            lifetime: Arbitrary::arbitrary(u)?,
            colon_token: Arbitrary::arbitrary(u)?,
            bounds: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for PredicateType {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(PredicateType {
            lifetimes: Arbitrary::arbitrary(u)?,
            bounded_ty: Arbitrary::arbitrary(u)?,
            colon_token: Arbitrary::arbitrary(u)?,
            bounds: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for QSelf {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(QSelf {
            lt_token: Arbitrary::arbitrary(u)?,
            ty: Arbitrary::arbitrary(u)?,
            position: Arbitrary::arbitrary(u)?,
            as_token: Arbitrary::arbitrary(u)?,
            gt_token: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for RangeLimits {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok({
            let index = (0..2u8).arbitrary(u)?;
            match index {
                0u8 => RangeLimits::HalfOpen(Arbitrary::arbitrary(u)?),
                1u8 => RangeLimits::Closed(Arbitrary::arbitrary(u)?),
            }
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for Receiver {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(Receiver {
            attrs: Arbitrary::arbitrary(u)?,
            reference: Arbitrary::arbitrary(u)?,
            mutability: Arbitrary::arbitrary(u)?,
            self_token: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for ReturnType {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok({
            let index = (0..2u8).arbitrary(u)?;
            match index {
                0u8 => ReturnType::Default,
                1u8 => {
                    ReturnType::Type(Arbitrary::arbitrary(u)?, Arbitrary::arbitrary(u)?)
                }
            }
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for Signature {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(Signature {
            constness: Arbitrary::arbitrary(u)?,
            asyncness: Arbitrary::arbitrary(u)?,
            unsafety: Arbitrary::arbitrary(u)?,
            abi: Arbitrary::arbitrary(u)?,
            fn_token: Arbitrary::arbitrary(u)?,
            ident: Arbitrary::arbitrary(u)?,
            generics: Arbitrary::arbitrary(u)?,
            paren_token: Arbitrary::arbitrary(u)?,
            inputs: Arbitrary::arbitrary(u)?,
            variadic: Arbitrary::arbitrary(u)?,
            output: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for Stmt {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok({
            let index = (0..4u8).arbitrary(u)?;
            match index {
                0u8 => Stmt::Local(Arbitrary::arbitrary(u)?),
                1u8 => Stmt::Item(Arbitrary::arbitrary(u)?),
                2u8 => Stmt::Expr(Arbitrary::arbitrary(u)?),
                3u8 => Stmt::Semi(Arbitrary::arbitrary(u)?, Arbitrary::arbitrary(u)?),
            }
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for TraitBound {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(TraitBound {
            paren_token: Arbitrary::arbitrary(u)?,
            modifier: Arbitrary::arbitrary(u)?,
            lifetimes: Arbitrary::arbitrary(u)?,
            path: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for TraitBoundModifier {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok({
            let index = (0..2u8).arbitrary(u)?;
            match index {
                0u8 => TraitBoundModifier::None,
                1u8 => TraitBoundModifier::Maybe(Arbitrary::arbitrary(u)?),
            }
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for TraitItem {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok({
            let index = (0..5u8).arbitrary(u)?;
            match index {
                0u8 => TraitItem::Const(Arbitrary::arbitrary(u)?),
                1u8 => TraitItem::Method(Arbitrary::arbitrary(u)?),
                2u8 => TraitItem::Type(Arbitrary::arbitrary(u)?),
                3u8 => TraitItem::Macro(Arbitrary::arbitrary(u)?),
                4u8 => TraitItem::Verbatim(Arbitrary::arbitrary(u)?),
            }
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for TraitItemConst {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(TraitItemConst {
            attrs: Arbitrary::arbitrary(u)?,
            const_token: Arbitrary::arbitrary(u)?,
            ident: Arbitrary::arbitrary(u)?,
            colon_token: Arbitrary::arbitrary(u)?,
            ty: Arbitrary::arbitrary(u)?,
            default: Arbitrary::arbitrary(u)?,
            semi_token: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for TraitItemMacro {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(TraitItemMacro {
            attrs: Arbitrary::arbitrary(u)?,
            mac: Arbitrary::arbitrary(u)?,
            semi_token: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for TraitItemMethod {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(TraitItemMethod {
            attrs: Arbitrary::arbitrary(u)?,
            sig: Arbitrary::arbitrary(u)?,
            default: Arbitrary::arbitrary(u)?,
            semi_token: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for TraitItemType {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(TraitItemType {
            attrs: Arbitrary::arbitrary(u)?,
            type_token: Arbitrary::arbitrary(u)?,
            ident: Arbitrary::arbitrary(u)?,
            generics: Arbitrary::arbitrary(u)?,
            colon_token: Arbitrary::arbitrary(u)?,
            bounds: Arbitrary::arbitrary(u)?,
            default: Arbitrary::arbitrary(u)?,
            semi_token: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for Type {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok({
            let index = (0..15u8).arbitrary(u)?;
            match index {
                0u8 => Type::Array(Arbitrary::arbitrary(u)?),
                1u8 => Type::BareFn(Arbitrary::arbitrary(u)?),
                2u8 => Type::Group(Arbitrary::arbitrary(u)?),
                3u8 => Type::ImplTrait(Arbitrary::arbitrary(u)?),
                4u8 => Type::Infer(Arbitrary::arbitrary(u)?),
                5u8 => Type::Macro(Arbitrary::arbitrary(u)?),
                6u8 => Type::Never(Arbitrary::arbitrary(u)?),
                7u8 => Type::Paren(Arbitrary::arbitrary(u)?),
                8u8 => Type::Path(Arbitrary::arbitrary(u)?),
                9u8 => Type::Ptr(Arbitrary::arbitrary(u)?),
                10u8 => Type::Reference(Arbitrary::arbitrary(u)?),
                11u8 => Type::Slice(Arbitrary::arbitrary(u)?),
                12u8 => Type::TraitObject(Arbitrary::arbitrary(u)?),
                13u8 => Type::Tuple(Arbitrary::arbitrary(u)?),
                14u8 => Type::Verbatim(Arbitrary::arbitrary(u)?),
            }
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for TypeArray {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(TypeArray {
            bracket_token: Arbitrary::arbitrary(u)?,
            elem: Arbitrary::arbitrary(u)?,
            semi_token: Arbitrary::arbitrary(u)?,
            len: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for TypeBareFn {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(TypeBareFn {
            lifetimes: Arbitrary::arbitrary(u)?,
            unsafety: Arbitrary::arbitrary(u)?,
            abi: Arbitrary::arbitrary(u)?,
            fn_token: Arbitrary::arbitrary(u)?,
            paren_token: Arbitrary::arbitrary(u)?,
            inputs: Arbitrary::arbitrary(u)?,
            variadic: Arbitrary::arbitrary(u)?,
            output: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for TypeGroup {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(TypeGroup {
            group_token: Arbitrary::arbitrary(u)?,
            elem: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for TypeImplTrait {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(TypeImplTrait {
            impl_token: Arbitrary::arbitrary(u)?,
            bounds: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for TypeInfer {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(TypeInfer {
            underscore_token: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for TypeMacro {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(TypeMacro {
            mac: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for TypeNever {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(TypeNever {
            bang_token: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for TypeParam {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(TypeParam {
            attrs: Arbitrary::arbitrary(u)?,
            ident: Arbitrary::arbitrary(u)?,
            colon_token: Arbitrary::arbitrary(u)?,
            bounds: Arbitrary::arbitrary(u)?,
            eq_token: Arbitrary::arbitrary(u)?,
            default: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for TypeParamBound {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok({
            let index = (0..2u8).arbitrary(u)?;
            match index {
                0u8 => TypeParamBound::Trait(Arbitrary::arbitrary(u)?),
                1u8 => TypeParamBound::Lifetime(Arbitrary::arbitrary(u)?),
            }
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for TypeParen {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(TypeParen {
            paren_token: Arbitrary::arbitrary(u)?,
            elem: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for TypePath {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(TypePath {
            qself: Arbitrary::arbitrary(u)?,
            path: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for TypePtr {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(TypePtr {
            star_token: Arbitrary::arbitrary(u)?,
            const_token: Arbitrary::arbitrary(u)?,
            mutability: Arbitrary::arbitrary(u)?,
            elem: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for TypeReference {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(TypeReference {
            and_token: Arbitrary::arbitrary(u)?,
            lifetime: Arbitrary::arbitrary(u)?,
            mutability: Arbitrary::arbitrary(u)?,
            elem: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for TypeSlice {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(TypeSlice {
            bracket_token: Arbitrary::arbitrary(u)?,
            elem: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for TypeTraitObject {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(TypeTraitObject {
            dyn_token: Arbitrary::arbitrary(u)?,
            bounds: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for TypeTuple {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(TypeTuple {
            paren_token: Arbitrary::arbitrary(u)?,
            elems: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for UnOp {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok({
            let index = (0..3u8).arbitrary(u)?;
            match index {
                0u8 => UnOp::Deref(Arbitrary::arbitrary(u)?),
                1u8 => UnOp::Not(Arbitrary::arbitrary(u)?),
                2u8 => UnOp::Neg(Arbitrary::arbitrary(u)?),
            }
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for UseGlob {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(UseGlob {
            star_token: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for UseGroup {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(UseGroup {
            brace_token: Arbitrary::arbitrary(u)?,
            items: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for UseName {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(UseName {
            ident: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for UsePath {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(UsePath {
            ident: Arbitrary::arbitrary(u)?,
            colon2_token: Arbitrary::arbitrary(u)?,
            tree: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for UseRename {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(UseRename {
            ident: Arbitrary::arbitrary(u)?,
            as_token: Arbitrary::arbitrary(u)?,
            rename: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(feature = "full")]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for UseTree {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok({
            let index = (0..5u8).arbitrary(u)?;
            match index {
                0u8 => UseTree::Path(Arbitrary::arbitrary(u)?),
                1u8 => UseTree::Name(Arbitrary::arbitrary(u)?),
                2u8 => UseTree::Rename(Arbitrary::arbitrary(u)?),
                3u8 => UseTree::Glob(Arbitrary::arbitrary(u)?),
                4u8 => UseTree::Group(Arbitrary::arbitrary(u)?),
            }
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for Variadic {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(Variadic {
            attrs: Arbitrary::arbitrary(u)?,
            dots: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for Variant {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(Variant {
            attrs: Arbitrary::arbitrary(u)?,
            ident: Arbitrary::arbitrary(u)?,
            fields: Arbitrary::arbitrary(u)?,
            discriminant: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for VisCrate {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(VisCrate {
            crate_token: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for VisPublic {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(VisPublic {
            pub_token: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for VisRestricted {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(VisRestricted {
            pub_token: Arbitrary::arbitrary(u)?,
            paren_token: Arbitrary::arbitrary(u)?,
            in_token: Arbitrary::arbitrary(u)?,
            path: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for Visibility {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok({
            let index = (0..4u8).arbitrary(u)?;
            match index {
                0u8 => Visibility::Public(Arbitrary::arbitrary(u)?),
                1u8 => Visibility::Crate(Arbitrary::arbitrary(u)?),
                2u8 => Visibility::Restricted(Arbitrary::arbitrary(u)?),
                3u8 => Visibility::Inherited,
            }
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for WhereClause {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok(WhereClause {
            where_token: Arbitrary::arbitrary(u)?,
            predicates: Arbitrary::arbitrary(u)?,
        })
    }
}
#[cfg(any(feature = "derive", feature = "full"))]
#[cfg_attr(doc_cfg, doc(cfg(feature = "arbitrary")))]
impl<'a> Arbitrary<'a> for WherePredicate {
    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
        Ok({
            let index = (0..3u8).arbitrary(u)?;
            match index {
                0u8 => WherePredicate::Type(Arbitrary::arbitrary(u)?),
                1u8 => WherePredicate::Lifetime(Arbitrary::arbitrary(u)?),
                2u8 => WherePredicate::Eq(Arbitrary::arbitrary(u)?),
            }
        })
    }
}
